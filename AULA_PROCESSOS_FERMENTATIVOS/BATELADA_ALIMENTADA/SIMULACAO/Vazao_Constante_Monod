#Importando as bibliotecas para importação e exportação de dados, realização de operações matemáticas, plotação gráfica de resultados::
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import pandas as pd

# Processo divido em duas etapas: batelada e batelada alimentada

                                            ## ENTRADAS ##

#BATELADA
##Concentração celular inicial:
Cx0_bat = 0.1
##Concentração inicial de substrato fornecido às celulas inicial:
Cs0_bat = 70 
##Concentração de produto gerado inicial:
Cp0_bat = 0
##Início do cultivo microbiano em batelada:
T0_bat = 0
##Término do cultivo microbiano em batelada:
Tf_bat = 10
##Intervalo de tempo (passo):
Int_bat = 0.5
##Entrada para a taxa específica de crescimento:
mimax_bat = 0.4
##Entrada para a constante Ks:
Ks_bat = 2
##Entrada para o coeficiente Yx/s:
Yxs_bat = 0.3
##Entrada para a constante alfa:
alfa_bat = 0.3
##Entrada para a constante beta:
beta_bat = 0.1
##Entrada para a constante de morte:
Kd_bat = 0.001

#BATELADA ALIMENTADA
##Concentração de substrato na corrente de alimentação:
Cs0_alimentacao = 150
##Início do cultivo microbiano em batelada alimentada:
T0_alim = Tf_bat
##Término do cultivo microbiano em batelada alimentada:
Tf_alim = 35
##Intervalo de tempo (passo):
Int_alim = 0.5
##Volume de meio de cultivo inicial:
V0 = 2
##Volume útil total do biorreator:
Vf = 6
## Vazão:
Q = 2
##Entrada para a taxa específica de crescimento:
mimax_alim = 0.3
##Entrada para a constante Ks:
Ks_alim = 3.1
##Entrada para o coeficiente Yx/s:
Yxs_alim = 0.3
##Entrada para a constante alfa:
alfa_alim = 0.3
##Entrada para a constante beta:
beta_alim = 0.1
##Entrada para a constante de morte:
Kd_alim = 0.001

                                ## INTEGRAÇÃO NUMÉRICO-COMPUTACIONAL DE EDOs ##

## BATELADA
#Definindo o sistema de EDOs:
def modelos_crescimento_bat (Concent,t_bat):
    Cx,Cs,Cp = Concent
    mi = mimax_bat * (Cs/(Ks_bat + Cs))
    dCxdt = (mi - Kd_bat) * Cx
    dCsdt = (-1/Yxs_bat) * mi * Cx
    dCpdt = alfa_bat * mi * Cx + beta_bat * Cx
    return(dCxdt,dCsdt,dCpdt)

# Condições iniciais:
init_concent_bat = [Cx0_bat,Cs0_bat,Cp0_bat]
# Vetor tempo:
t_bat = np.arange(T0_bat,Tf_bat,Int_bat)
# Integrando:
Concent_bat= odeint(modelos_crescimento_bat,init_concent_bat,t_bat)
print("\nConcentrações:\n",Concent_bat)

#Separando, a partir da matriz Concent, as vetores Cx, Cs e Cp:
## Matriz concentração celular:
Cx_bat = Concent_bat[:,0]
print("Cx:", Cx_bat)
## Matriz concentração de substrato:
Cs_bat = Concent_bat[:,1]
print("Cs:", Cs_bat)
## Matriz concentração de produto:
Cp_bat = Concent_bat[:,2]
print("Cp:", Cp_bat)

# Criando a função que permite a geração do output dos valores de concentração (Cx, Cs e Cp) gerados por integração numérica computacional:
df_concents= pd.DataFrame({'Tempo(h)':t_bat,'Cx(g/L)': Cx_bat, 'Cs(g/L)': Cs_bat, 'Cp(g/L)': Cp_bat})
##O pacote Pandas permite escrever, em Python, em uma planilha Excel, os dados de Cx, Cs e Cp calculados após integração pelo algoritmo por meio da função abaixo:	
with pd.ExcelWriter('Output_batelada_processos_fermentativos.xlsx',engine = 'openpyxl') as writer:
    df_concents.to_excel(writer, sheet_name="Output_concent_batelada")
##O documento, em xlsx, é salvo com o mesmo nome indicado entre aspas na função anterior:
    writer.save()

## Batelada Alimentada
# Definindo o sistema de EDOs:
def modelos_crescimento_alim (Concent,t_alim):
    Cx,Cs,Cp = Concent
    mi = mimax_alim * (Cs / (Ks_alim + Cs))
    D = Q / (V0 + Q * t_alim)
    dCxdt = (mi - Kd_alim - D) * Cx
    dCsdt = D * (Cs0_alimentacao - Cs) - ((mi * Cx) / Yxs_alim)
    dCpdt = D *(Cp0_alim - Cp) + Cx * (beta_alim + alfa_alim * mi)
    return(dCxdt,dCsdt,dCpdt)
    
# Condições iniciais:
## Lista que contém os valores iniciais de concentração celular, de substrato de produto:
### Valores finais da batelada vão ser os iniciais da batelada alimentada:
Cx0_alim = Cx_bat[len(Cx_bat)-1]   
Cs0_alim = Cs_bat[len(Cs_bat)-1]
Cp0_alim = Cp_bat[len(Cp_bat)-1]      
init_concent_alim = [Cx0_alim, Cs0_alim, Cp0_alim]

## Vetor tempo:
t_alim = np.arange(Tf_bat, Tf_alim, Int_alim)
## Integrando:
Concent_alim = odeint(modelos_crescimento_alim, init_concent_alim, t_alim)
print("\nConcentrações:\n",Concent_alim)

# Separando, a partir da matriz Concent, as vetores Cx, Cs e Cp:
## Matriz concentração celular:
Cx_alim = Concent_alim[:,0]
print("Cx alim:", Cx_alim)
## Matriz concentração de substrato:
Cs_alim = Concent_alim[:,1]
print("Cs alim:", Cs_alim)
## Matriz concentração de produto:
Cp_alim = Concent_alim[:,2]
print("Cp alim:", Cp_alim)
Cs_alim_init = round(np.float(Cs_alim[0]),2)
print("Concentração de substrato imediatamente depois da alimentação:",Cs_alim_init)
Cx_alim_init = round(np.float(Cx_alim[0]),2)
print("Concentração de células ao fim da operação:",Cx_alim_init)

# Criando a função que permite a geração do output dos valores de concentração (Cx, Cs e Cp) gerados por integração numérica computacional:
df_concents= pd.DataFrame({'Tempo(h)':t_alim,'Cx(g/L)': Cx_alim, 'Cs(g/L)': Cs_alim, 'Cp(g/L)': Cp_alim})
##O pacote Pandas permite escrever, em Python, em uma planilha Excel, os dados de Cx, Cs e Cp calculados após integração pelo algoritmo por meio da função abaixo:	
with pd.ExcelWriter('Output_batelada_alimentada_processos_fermentativos.xlsx',engine = 'openpyxl') as writer:
    df_concents.to_excel(writer, sheet_name="Output_concent_alimentada")
##O documento, em xlsx, é salvo com o mesmo nome indicado entre aspas na função anterior:
    writer.save()                                      
 
    #9x14

##Contadores gerais
limite_bat = len(Concent_bat)
print("Limite batelada",limite_bat)
limite_alim = len(Concent_alim)
print("Limite batelada alimentada", limite_alim)

concen_totalx = []
concen_totals = []
concen_totalp = []
bat = 0
bat_alim = 0
#if (tbatelada[bat]<(Tfbatelada-Intervalobatelada)):
while (bat<limite_bat):
    concen_totalx.append(Cx_bat[bat])
    concen_totals.append(Cs_bat[bat])
    concen_totalp.append(Cp_bat[bat])
    bat = bat + 1       
#if (tal[batal]<Tfba):
while (bat_alim<limite_alim):
    concen_totalx.append(Cx_alim[bat_alim])
    concen_totals.append(Cs_alim[bat_alim])
    concen_totalp.append(Cp_alim[bat_alim])
    bat_alim = bat_alim + 1

## Vetor tempo total do processo:
T_total = np.arange(T0_bat, Tf_alim, Int_bat)

## Conversão das listas para arrays - necessário para operações matemáticas:
concen_totalx = np.asarray(concen_totalx)
concen_totals = np.asarray(concen_totals)
concen_totalp = np.asarray(concen_totalp)

                                ## GERAÇÃO DE GRÁFICOS ##

def tam_graf():
    # Gráfico batelada e batelada alimentada
    SMALL_SIZE = 20                       
    MEDIUM_SIZE = 24                                             

    ## Comando para determinar o tamanho segundo o qual os textos grafados no gráfico serão impressos na tela:
    plt.rc('font', size=SMALL_SIZE)          
    plt.rc('axes', titlesize=SMALL_SIZE)     
    plt.rc('axes', labelsize=MEDIUM_SIZE)    
    plt.rc('xtick', labelsize=SMALL_SIZE)    
    plt.rc('ytick', labelsize=SMALL_SIZE)    
    plt.rc('legend', fontsize=SMALL_SIZE)      

# Gráfico perfil de concentração:
# Definindo a figura que será gerada:
tam_graf()
_ = f = plt.figure() 
# Definindo a criação de um gráfico 1x1 com um eixo secundário:    
_ = ax = f.add_subplot(111)                            
_ = lns1 = ax.plot(T_total,concen_totalx,'red',linewidth=3,label='Cx modelo')    
_ = lns2 = ax.plot(T_total,concen_totals,linestyle=':',color='blue',linewidth=3,label='Cs modelo')  
_ = ax2 = ax.twinx()
_ = lns3 = ax2.plot(T_total,concen_totalp,linestyle='--',color='green',linewidth=4,label='Cp modelo')  
_ = ax.axvline(x = Tf_bat, color = "grey", linestyle="dashed", linewidth=3) 
_ = ax.set_xlabel('Tempo de cultivo (h)',weight='bold')               
_ = ax.set_ylabel('Cx, Cs (g/L)', weight='bold')
_ = ax2.set_ylabel('Cp (g/L)', weight='bold') 
lns = lns1 + lns2 + lns3 
labs = [l.get_label() for l in lns]
_ = ax.legend(lns, labs, loc='upper center', bbox_to_anchor=(0.5, 1.11),ncol=3, fancybox=True, shadow=True )
_ = ax.annotate(u'Alimentação', xy=(Tf_bat,Cs_alim_init), xytext=((Tf_bat + 2),(Cs0_bat)), arrowprops=dict(facecolor='lightgrey',shrink=0.05),size=18,weight='bold')
_ = ax.grid(True)                                                
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14)                                                   
_ = f.patch.set_facecolor('white')                                
_ = plt.style.use('default') 
plt.show()

## Cálculo produtividade - celular e do produto:
Px = concen_totalx[1:]/T_total[1:]
Pp = concen_totalp[1:]/T_total[1:]

## Plotando a figura gráfica - produtividades:
tam_graf()    
_ = f = plt.figure() 
_ = ax = f.add_subplot(111)  
_ = lns1 = ax.plot(T_total[1:], Px, color = "red", linewidth=3, label='Produtividade Celular')
_ = ax2 = ax.twinx()
_ = lns2 = ax2.plot(T_total[1:], Pp, linestyle=":", color = "green", linewidth=3,label='Produtividade do Produto') 
_ = ax.axvline(x = Tf_bat, color = "grey", linestyle="dashed", linewidth=3)
_ = ax.set_xlabel('Tempo de cultivo (h)',weight='bold')               
_ = ax.set_ylabel('Produtividade Celular (gx/L.h)', weight='bold')
_ = ax2.set_ylabel('Produtividade Produto (gp/L.h)', weight='bold') 
lns = lns1 + lns2
labs = [l.get_label() for l in lns]
_ = ax.legend(lns, labs, loc='upper center', bbox_to_anchor=(0.5, 1.11),ncol=2, fancybox=True, shadow=True)  
_ = ax.grid(True)
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14)
_ = f.patch.set_facecolor('white')                                   
_ = plt.style.use('default')    
plt.show()

# Inserindo 0 para o primeiro valor de produtividade:
Px = np.insert(Px,0,Px[0])
Pp = np.insert(Pp,0,Pp[0])

## Cálculo produtividade específica:
Ppx = (concen_totalp)*(1/concen_totalx)
Ppx[Ppx<0] = 0

## Plotando a figura gráfica - produtividades: 
tam_graf()   
_ = f = plt.figure() 
_ = ax = f.add_subplot(111)  
_ = plt.plot(T_total, Ppx, color = "purple", linewidth=3, label='Produtividade Específica')
_ = plt.axvline(x = Tf_bat, color = "grey", linestyle="dashed", linewidth=3)
_ = plt.xlabel('Tempo de cultivo (h)',weight='bold')               
_ = plt.ylabel('Produtividade Específica (gp/gx)', weight='bold')
_ = plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.11),ncol=2, fancybox=True, shadow=True)  
_ = plt.grid(True)
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14)
_ = f.patch.set_facecolor('white')                                   
_ = plt.style.use('default')    
plt.show()

## Cálculo mi: * manter da batelada alimentada, uma vez que normalmente estes parâmetros se igualam aos da batelada:
mi = mimax_bat*(concen_totals/(Ks_bat + concen_totals))

## Plotando a figura gráfica - velocidade de crescimento: 
tam_graf()   
_ = f = plt.figure() 
_ = ax = f.add_subplot(111)  
_ = plt.plot(T_total, mi, color = "orange", linewidth=3, label='Velocidade de crescimento')
_ = plt.axvline(x = Tf_bat, color = "grey", linestyle="dashed", linewidth=3)
_ = plt.xlabel('Tempo de cultivo (h)',weight='bold')               
_ = plt.ylabel('Taxa $\mu (h^{-1}$)', weight='bold')
_ = plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.11),ncol=2, fancybox=True, shadow=True)  
_ = plt.grid(True)
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14)
_ = f.patch.set_facecolor('white')                                   
_ = plt.style.use('default')    
plt.show()

## Tempo de processo em batelada alimentada:
t_alim = Tf_alim - Tf_bat
t_total_alim = np.arange(Tf_bat, t_alim, Int_alim)
## Cálculo volume(t) - integração dV/dt = Q para Q constante:
V_calc = Q * t_total_alim + V0

## Plotando a figura gráfica - variação do volume do tanque: 
tam_graf()   
_ = f = plt.figure() 
_ = ax = f.add_subplot(111)
_ = plt.plot(t_total_alim, V_calc, color = "brown",linewidth=3, label='Volume')
_ = plt.xlabel('Tempo de cultivo alimentado (h)',weight='bold')               
_ = plt.ylabel('Volume reacional (L)', weight='bold')
_ = plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.14),ncol=2, fancybox=True, shadow=True )
_ = plt.grid(True)  
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14)
_ = f.patch.set_facecolor('white')                                   
_ = plt.style.use('default')    

## Vazão constante:
Q_const = np.repeat(Q, len(t_total_alim))
## Plotando a figura gráfica - Vazão:  
tam_graf()  
_ = f = plt.figure() 
_ = ax = f.add_subplot(111)
_ = plt.plot(t_total_alim, Q_const, color = "magenta",linewidth=3, label='Vazão')
_ = plt.xlabel('Tempo de cultivo alimentado (h)',weight='bold')               
_ = plt.ylabel('Vazão de alimentação (L/h)', weight='bold')
_ = plt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.14),ncol=2, fancybox=True, shadow=True )
_ = plt.grid(True) 
_ = f.set_figheight(9)                                                 
_ = f.set_figwidth(14) 
_ = f.patch.set_facecolor('white')                                   
_ = plt.style.use('default')    

## Saída dos valores simulados:
df_concents_produt = pd.DataFrame({'Tempo(h)': T_total, 'Cx(g/L)': concen_totalx, 'Cs(g/L)': concen_totals, 'Cp(g/L)': concen_totalp,'mi(h-¹)':mi,
                           'Px(gcél/L.h)': Px, 'Pp(gprod/L.h)': Pp, 'Ppx(gprod/gcél)':Ppx})
df_vol_vaz = pd.DataFrame({"Tempo(h)": t_total_alim, "Volume(L)": V_calc, "Vazão(L/h)": Q_const})
df_params_sim = pd.DataFrame({'mimáx_sim(h-¹)': [mimax_alim],'Ks_sim(g/L)': [Ks_alim],
                              'Yxs_sim(gcél/gsubs)': [Yxs_alim],
                              'alfa(gprod/gcél)': [alfa_alim], 'beta_sim(gprod/gcél.h)': [beta_alim],
                              "Q(L.h)": [Q], "V0(L)": [V0], "tf_batelada(h)": [Tf_bat], 
                              "Cs0_alim(gs/L)": [Cs0_alimentacao]})
df_saida_Monod = pd.concat([df_concents_produt, df_vol_vaz, df_params_sim], axis=1)
with pd.ExcelWriter('Sim_Monod_alim_const.xlsx') as writer:
    df_saida_Monod.to_excel(writer, sheet_name="Saída_Monod_alim_const")
    writer.save()
